generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar
  familyName      String    @db.VarChar
  email           String    @unique @db.VarChar
  password        String    @db.Text
  phone           Int?
  role            RoleType? @default(PARENT)
  address         String?   @db.Text
  gender          Gender?
  profile_picture String?   @db.VarChar
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  isActive        Boolean   @default(true)
  speciality      String?   @db.VarChar

  // Relations
  children      Children[]
  userResponses UserResponse[]
  // Relation pour les enseignants (si le r√¥le est TEACHER)
  classroom     Classroom?

  @@map("users")
}

model Children {
  id              Int     @id @default(autoincrement())
  full_name       String  @db.VarChar
  birth_date      String  @db.VarChar
  gender          Gender
  age             Int
  profile_picture String? @db.VarChar
  parent_id       Int

  // Nouvelles infos
  address                     String? @db.VarChar
  city                        String? @db.VarChar
  emergency_contact           String? @db.VarChar
  emergency_phone             String? @db.VarChar
  secondary_emergency_contact String? @db.VarChar
  secondary_emergency_phone   String? @db.VarChar
  class_group                 String? @db.VarChar

  blood_type         String? @db.VarChar
  medical_info       String? @db.Text
  allergies          String? @db.Text
  special_needs      String? @db.Text
  vaccination_status String? @db.VarChar

  entry_date String? @db.VarChar
  notes      String? @db.Text

  created_at DateTime @default(now())

  // Relations
  parent User @relation(fields: [parent_id], references: [id])

  // Relation inverse pour les affectations
  assignments Assignment[]

  @@map("children")
}

model Classroom {
  id       Int      @id @default(autoincrement())
  name     String   @db.VarChar(100)
  category Category // BEBE, PETIT, MOYEN, GRAND
  ageMin   Int
  ageMax   Int
  capacity Int?

  // Relation avec l'enseignant (un seul enseignant par classe)
  teacherId Int?  @unique // Un enseignant peut √™tre assign√© √† une seule classe
  teacher   User? @relation(fields: [teacherId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  assignments     Assignment[] // Pour l'affectation des enfants
  schedulePeriods SchedulePeriod[]

  @@map("classrooms")
}

// Table d'affectation pour g√©rer l'assignation des enfants aux classes
model Assignment {
  id          Int       @id @default(autoincrement())
  classroomId Int
  childId     Int
  startDate   DateTime  @default(now()) // Date de d√©but d'affectation
  endDate     DateTime? // Date de fin (optionnelle, pour les changements de classe)
  isActive    Boolean   @default(true) // Statut de l'affectation
  notes       String?   @db.Text // Notes sur l'affectation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  classroom Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  child     Children  @relation(fields: [childId], references: [id], onDelete: Cascade)

  // Un enfant ne peut √™tre assign√© qu'√† une seule classe active √† la fois
  @@unique([childId, isActive])
  @@map("assignments")
}

model SchedulePeriod {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  classroomId Int
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  classroom Classroom  @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  schedules Schedule[]

  @@map("schedule_periods")
}

model Schedule {
  id               Int       @id @default(autoincrement())
  schedulePeriodId Int
  dayOfWeek        DayOfWeek
  startTime        String    @db.VarChar(5)
  endTime          String    @db.VarChar(5)
  activity         String    @db.VarChar(255)
  location         String?   @db.VarChar(100)
  isActive         Boolean   @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  schedulePeriod SchedulePeriod @relation(fields: [schedulePeriodId], references: [id], onDelete: Cascade)

  @@map("schedules")
}

model Menu {
  id   Int      @id @default(autoincrement())
  date String
  day  String   @db.VarChar(20)
  type MenuType

  // üçΩÔ∏è D√©jeuner
  starter     String? @db.Text // Entr√©e (ex : soupe, salade)
  main_course String? @db.Text // Plat principal (ex : riz-poulet)
  side_dish   String? @db.Text // Accompagnement (ex : l√©gumes)
  dessert     String? @db.Text // Dessert (ex : yaourt, fruits)
  drink       String? @db.Text // Boisson (eau, jus, etc.)

  // üßÅ Go√ªter
  snack String? @db.Text // Description de la collation

  // Autres
  special_note String?  @db.Text // Notes sp√©ciales (sans gluten, halal, etc.)
  created_at   DateTime @default(now()) // Date d'ajout dans le syst√®me

  @@map("menus")
}

model Question {
  id         Int      @id @default(autoincrement())
  label      String   @db.Text
  created_at DateTime @default(now())

  // Relations
  userResponses UserResponse[]

  @@map("questions")
}

model UserResponse {
  id          Int      @id @default(autoincrement())
  user_id     Int
  question_id Int
  response    String   @db.Text
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  user     User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  question Question @relation(fields: [question_id], references: [id], onDelete: Cascade)

  // Index composite pour √©viter les doublons (un utilisateur ne peut r√©pondre qu'une fois √† une question)
  @@unique([user_id, question_id])
  @@map("user_responses")
}

enum Gender {
  H
  F
}

enum RoleType {
  SUPER_ADMIN
  ADMIN
  PARENT
  TEACHER
}

enum MenuType {
  Breakfast
  Lunch
  Gouter
}

enum Category {
  BEBE
  PETIT
  MOYEN
  GRAND
}

enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
}
