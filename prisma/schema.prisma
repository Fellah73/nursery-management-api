generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar
  familyName      String    @db.VarChar
  email           String    @unique @db.VarChar
  password        String    @db.Text
  phone           Int?
  role            RoleType? @default(PARENT)
  address         String?   @db.Text
  gender          Gender?
  profile_picture String?   @db.VarChar
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  isActive        Boolean   @default(true)
  speciality      String?   @db.VarChar

  // Relations
  children      Children[]
  userResponses UserResponse[]
  // Relations pour les présences du personnel
  attendances   Attendance[]   @relation("AttendanceUser")
  // Relations pour les approbations de présences
  approvals     Attendance[]   @relation("AttendanceApprover")
  // Relation pour les enseignants (si le rôle est TEACHER)
  classroom     Classroom?

  @@map("users")
}

model Children {
  id              Int     @id @default(autoincrement())
  full_name       String  @db.VarChar
  birth_date      String  @db.VarChar
  gender          Gender
  age             Int
  profile_picture String? @db.VarChar
  parent_id       Int

  // Nouvelles infos
  address                     String? @db.VarChar
  city                        String? @db.VarChar
  emergency_contact           String? @db.VarChar
  emergency_phone             String? @db.VarChar
  secondary_emergency_contact String? @db.VarChar
  secondary_emergency_phone   String? @db.VarChar
  class_group                 String? @db.VarChar

  blood_type         String? @db.VarChar
  medical_info       String? @db.Text
  allergies          String? @db.Text
  special_needs      String? @db.Text
  vaccination_status String? @db.VarChar

  entry_date String? @db.VarChar
  notes      String? @db.Text

  created_at DateTime @default(now())

  // Relations
  parent User @relation(fields: [parent_id], references: [id])

  // Relation inverse pour les affectations
  assignments Assignment[]

  // Relations pour les présences des enfants
  attendances Attendance[]

  @@map("children")
}

model Classroom {
  id       Int      @id @default(autoincrement())
  name     String   @db.VarChar(100)
  category Category // BEBE, PETIT, MOYEN, GRAND
  ageMin   Int
  ageMax   Int
  capacity Int?

  // Relation avec l'enseignant (un seul enseignant par classe)
  teacherId Int?  @unique // Un enseignant peut être assigné à une seule classe
  teacher   User? @relation(fields: [teacherId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  assignments     Assignment[] // Pour l'affectation des enfants
  schedulePeriods SchedulePeriod[]

  @@map("classrooms")
}

// Table d'affectation pour gérer l'assignation des enfants aux classes
model Assignment {
  id          Int       @id @default(autoincrement())
  classroomId Int
  childId     Int
  startDate   DateTime  @default(now()) // Date de début d'affectation
  endDate     DateTime? // Date de fin (optionnelle, pour les changements de classe)
  isActive    Boolean   @default(true) // Statut de l'affectation
  notes       String?   @db.Text // Notes sur l'affectation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  classroom Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  child     Children  @relation(fields: [childId], references: [id], onDelete: Cascade)

  // Un enfant ne peut être assigné qu'à une seule classe active à la fois
  @@unique([childId, isActive])
  @@map("assignments")
}

model SchedulePeriod {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  classroomId Int
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  classroom Classroom  @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  schedules Schedule[]

  @@map("schedule_periods")
}

model Schedule {
  id               Int       @id @default(autoincrement())
  schedulePeriodId Int
  dayOfWeek        DayOfWeek
  startTime        String    @db.VarChar(5)
  endTime          String    @db.VarChar(5)
  category         String?   @db.VarChar(50)
  activity         String    @db.VarChar(255)
  location         String?   @db.VarChar(100)
  isActive         Boolean   @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  schedulePeriod SchedulePeriod @relation(fields: [schedulePeriodId], references: [id], onDelete: Cascade)

  @@map("schedules")
}

model MenuPeriod {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  description String?   @db.Text
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  category    Category

  menus Menu[]

  // Contraintes : une seule période active par catégorie
  @@unique([id, category])
  @@map("menu_periods")
}

model Menu {
  id           Int       @id @default(autoincrement())
  menuPeriodId Int
  dayOfWeek    DayOfWeek
  mealType     MenuType

  starter      String?  @db.Text
  main_course  String?  @db.Text
  side_dish    String?  @db.Text
  dessert      String?  @db.Text
  drink        String?  @db.Text
  snack        String?  @db.Text
  special_note String?  @db.Text
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  menuPeriod MenuPeriod @relation(fields: [menuPeriodId], references: [id], onDelete: Cascade)

  // Contraintes : un seul menu par période/jour/type
  @@unique([menuPeriodId, dayOfWeek, mealType])
  @@map("menus")
}

model Question {
  id         Int      @id @default(autoincrement())
  label      String   @db.Text
  created_at DateTime @default(now())

  // Relations
  userResponses UserResponse[]

  @@map("questions")
}

model UserResponse {
  id          Int      @id @default(autoincrement())
  user_id     Int
  question_id Int
  response    String   @db.Text
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  user     User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  question Question @relation(fields: [question_id], references: [id], onDelete: Cascade)

  // Index composite pour éviter les doublons (un utilisateur ne peut répondre qu'une fois à une question)
  @@unique([user_id, question_id])
  @@map("user_responses")
}

// Table pour les dates de présence (journées)
model AttendanceDate {
  id        Int      @id @default(autoincrement())
  date      DateTime @unique @db.Date
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  attendances Attendance[]

  @@map("attendance_dates")
}

model Attendance {
  id               Int @id @default(autoincrement())
  attendanceDateId Int

  // Type d'entité
  entityType EntityType // STAFF ou CHILD
  userId     Int? // Pour le staff
  childId    Int? // Pour les enfants

  status AttendanceStatus @default(PENDING)

  // Horaires
  checkInTime  DateTime?
  checkOutTime DateTime?

  // Approbation
  approvedBy Int?
  approvedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  attendanceDate AttendanceDate @relation(fields: [attendanceDateId], references: [id], onDelete: Cascade)
  user           User?          @relation("AttendanceUser", fields: [userId], references: [id], onDelete: Cascade)
  child          Children?      @relation(fields: [childId], references: [id], onDelete: Cascade)
  approver       User?          @relation("AttendanceApprover", fields: [approvedBy], references: [id])

  // Contraintes
  @@unique([attendanceDateId, userId, entityType])
  @@unique([attendanceDateId, childId, entityType])
  @@map("attendances")
}

model NurserySettings {
  id Int @id @default(autoincrement())

  // Horaires d'ouverture
  openingTime String @db.VarChar(5)

  // Configuration des créneaux d'attendance
  slotDuration  Int     @default(60)
  slotInterval  Int     @default(15)
  slotsPerDay   Int     @default(4)

  // Horaires des repas
  breakfastTime String? @db.VarChar(5)
  lunchTime     String? @db.VarChar(5)
  snackTime     String? @db.VarChar(5)


  // Durée des repas et siestes
  breakfastDuration Int @default(30) // minutes
  lunchDuration     Int @default(60)
  snackDuration     Int @default(30)
  napDuration       Int @default(30)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("nursery_settings")
}

enum EntityType {
  STAFF
  CHILD
}

enum AttendanceStatus {
  PENDING // Pas encore arrivé
  PRESENT // Présent à l'heure
  ABSENT // Absent (marqué automatiquement en fin de journée)
  LATE // En retard (calculé automatiquement)
}

enum Gender {
  H
  F
}

enum RoleType {
  SUPER_ADMIN
  ADMIN
  PARENT
  TEACHER
}

enum MenuType {
  Breakfast
  Lunch
  Gouter
}

enum Category {
  BEBE
  PETIT
  MOYEN
  GRAND
}

enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
}
